{
	"info": {
		"_postman_id": "6a2e9182-e23c-46c4-8670-ceba796fee66",
		"name": "JSONPlaceholder CRUD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40948063"
	},
	"item": [
		{
			"name": "GET - List All Posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST - Create Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Obtener los datos de la respuesta en formato JSON\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// Guardar el ID del post creado en la variable de colección\r",
							"pm.collectionVariables.set(\"postId\", jsonData.id);\r",
							"pm.collectionVariables.set(\"UserId\", jsonData.userId);\r",
							"\r",
							"// Verificar que el código de estado sea 201 (Creado)\r",
							"pm.test(\"Status Code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Verificar que la respuesta contiene los campos esperados\r",
							"pm.test(\"Response contains created post\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"title\", \"foo\");\r",
							"    pm.expect(jsonData).to.have.property(\"body\", \"bar\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"foo\",\r\n  \"body\": \"bar\",\r\n  \"userId\": 1\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET  -Get post id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Usamos el UserId de las variables de colección en la URL\r",
							"pm.test(\"Status Code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts/{{UserId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						"{{UserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET  -Delete User Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verificar que el código de estado sea 200 (se espera un código 200 en lugar de 204)\r",
							"pm.test(\"Status Code is 200\", function () {\r",
							"    pm.response.to.have.status(200); // Solo esperamos 200 como código de éxito\r",
							"});\r",
							"\r",
							"// Verificar que la respuesta esté vacía o tenga un objeto vacío {}\r",
							"pm.test(\"Response is empty or has no content\", function () {\r",
							"    pm.response.to.have.body(\"{}\"); // Verificamos que el cuerpo sea exactamente {}\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts/{{UserId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						"{{UserId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://jsonplaceholder.typicode.com",
			"type": "string"
		},
		{
			"key": "UserId",
			"value": "",
			"type": "string"
		},
		{
			"key": "postId",
			"value": ""
		}
	]
}